노드끼리 연결되어있을 때 연결된 네트워크 수 또는
방향이 존재한다면 사이클이 몇개인지를 구하는 방법은
무조건 dfs 사용해야하고
노드의 갯수만큼 이중배열을 만들어서 이어진 노드를 입력받을때
-> 1을 [i][x]와 [x][i]에 넣어준다.
그리고 중요한건 visited(방문 여부) 방문했으면 pass(이미 읽은 네트워크)
메인에서 dfs가 크게 돌고나서 count를 1씩 증가시켜야한다.

* 엣지에 방향이 있건 없건 무조건 이중배열에 , dfs처리


사이클을 찾는 방법으로는 정형적으로 dfs를 통해 처리한다.
1. 이중배열을 생성한다. arr[n+1][n+1]
이유는 이전노드와 현재노드가 이어졌다면 1을 세팅함으로써 표현하기위해

2. visited배열을 통해 해당 노드를 방문한 적이 있는지를 체크한다.

3. dfs는 visited [i] 가 0일때만 가야한다. 이미방문한 적있으면 패스
따라서 if visited == 0일 때 
for(int j = 1; j< arr.length; j++){
if ( visited[j] == 0이고, arr[현재노드][j] 가 1(즉이어진 노드)이면
dfs(j)를 통해 현재노드를 최신화 하고 그다음에 이어진 곳을 찾는다.

이렇게 찾다가 visited[현재노드]가 1이라면 이미 방문한 적이 있는 노드로
이어졌다는 것이고 이것이 사이클이된다.
이렇게 되면 main에서의 dfs(i)가 끝나게 되고, main에서 count를 하나 더해준다.